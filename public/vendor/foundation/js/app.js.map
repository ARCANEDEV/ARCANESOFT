{"version":3,"sources":["app.js"],"names":[],"mappingsfile":"app.js","sourcesContent":["require('../../_shared/js/bootstrap');\nrequire('../../_shared/js/components');\n\nimport config from './config'\n\nimport layout from './widgets/layout'\nimport pushMenu from './widgets/push-menu'\nimport sidebar from './widgets/sidebar'\nimport controlSidebar from './widgets/control-sidebar'\nimport boxWidget from './widgets/box-widget'\n\nimport todoList from './plugins/todo-list'\n\n$.App = {\n    widgets: {\n        layout,\n        pushMenu,\n        sidebar,\n        controlSidebar,\n        boxWidget\n    }\n};\n\nconst app = new Vue({\n    el: '#app',\n    data: {\n        widgets: $.App.widgets\n    },\n    mounted() {\n        $(() => {\n            // Fix for IE page transitions\n            $('body').removeClass('hold-transition');\n\n            $.App.options = config;\n\n            // Extend options if external options exist\n            if (typeof AppOptions !== 'undefined') {\n                $.extend(true, $.App.options, AppOptions);\n            }\n\n            this.init()\n        });\n    },\n    methods: {\n        init() {\n            let options = $.App.options;\n\n            this.widgets.layout.activate();\n\n            // Enable sidebar tree view controls\n            this.widgets.sidebar.activate(this.widgets.layout, '.sidebar');\n\n            // Enable control sidebar\n            if (options.sidebar.controlOptions.enabled)\n                this.widgets.controlSidebar.activate();\n\n            // Add slimscroll to navbar dropdown\n            if (options.navbar.menu.slimScroll.enabled && typeof $.fn.slimscroll != 'undefined')\n                $('.navbar .menu').slimscroll({\n                    alwaysVisible: false,\n                    height: options.navbar.menu.slimScroll.height,\n                    size: options.navbar.menu.slimScroll.width\n                }).css('width', '100%');\n\n            // Activate sidebar push menu\n            if (options.sidebar.pushMenu)\n                this.widgets.pushMenu.activate(options.sidebar.toggleSelector);\n\n            // Activate Bootstrap tooltip\n            if (options.bootstrap.tooltip.enabled)\n                $('body').tooltip({\n                    selector: options.bootstrap.tooltip.selector\n                });\n\n            // Activate box widget\n            if (options.boxWidget.enabled)\n                this.widgets.boxWidget.activate();\n\n            // Activate fast click\n            if (options.fastClick.enabled && typeof FastClick != 'undefined')\n                FastClick.attach(document.body);\n\n            // Activate direct chat widget\n            if (options.directChat.enabled)\n                $(document).on('click', options.directChat.contactToggleSelector, (e) => {\n                    let box = $(e.target).parents('.direct-chat').first();\n\n                    box.toggleClass('direct-chat-contacts-open');\n                });\n\n            /*\n             * INITIALIZE BUTTON TOGGLE\n             * ------------------------\n             */\n            $('.btn-group[data-toggle=\"btn-toggle\"]').each((e) => {\n                var group = $(e.target);\n\n                group.find('.btn').on('click', function (e) {\n                    e.preventDefault();\n                    group.find('.btn.active').removeClass('active');\n                    $(e.target).addClass('active');\n                });\n            });\n\n            /*\n             * User menu animation\n             * -----------------------\n             */\n            let userMenu     = $('.dropdown.user.user-menu'),\n                userDropMenu = userMenu.find('.dropdown-menu');\n\n            userDropMenu.addClass('animated');\n\n            userMenu.on('show.bs.dropdown', () => {\n                userDropMenu.addClass('flipInY')\n            });\n\n            userMenu.on('hide.bs.dropdown', () => {\n                userDropMenu.removeClass('flipInY')\n            })\n        }\n    }\n});\n\n/* ------------------\n * - Custom Plugins -\n * ------------------\n * All custom plugins are defined below.\n */\n$(() => {\n    /*\n     * BOX REFRESH BUTTON\n     * ------------------\n     * This is a custom plugin to use with the component BOX. It allows you to add\n     * a refresh button to the box. It converts the box's state to a loading state.\n     *\n     * @type plugin\n     * @usage $(\"#box-widget\").boxRefresh( options );\n     */\n    $.fn.boxRefresh = (options) => {\n        // Render options\n        var settings = $.extend({\n            // Refresh button selector\n            trigger: '.refresh-btn',\n            // File source to be loaded (e.g: ajax/src.php)\n            source: '',\n            // Callbacks\n            onLoadStart(box) {\n                return box;\n            },\n            // Right after the button has been clicked\n            onLoadDone(box) {\n                return box;\n            }\n            // When the source has been loaded\n        }, options);\n\n        // The overlay\n        var overlay = $('<div class=\"overlay\"><div class=\"fa fa-refresh fa-spin\"></div></div>');\n\n        return this.each(function () {\n            // if a source is specified\n            if (settings.source === '') {\n                if (window.console) {\n                    window.console.log('Please specify a source first - boxRefresh()');\n                }\n\n                return;\n            }\n\n            // the box\n            var box  = $(this),\n                rBtn = box.find(settings.trigger).first(); // the Button\n\n            // On trigger click\n            rBtn.on('click', (e) => {\n                e.preventDefault();\n                // Add loading overlay\n                start(box);\n\n                // Perform ajax call\n                box.find('.box-body').load(settings.source, () => done(box));\n            });\n        });\n\n        function start(box) {\n            // Add overlay and loading img\n            box.append(overlay);\n\n            settings.onLoadStart.call(box);\n        }\n\n        function done(box) {\n            // Remove overlay and loading img\n            box.find(overlay).remove();\n\n            settings.onLoadDone.call(box);\n        }\n    };\n\n    /*\n     * EXPLICIT BOX CONTROLS\n     * -----------------------\n     * This is a custom plugin to use with the component BOX. It allows you to activate\n     * a box inserted in the DOM after the app.js was loaded, toggle and remove box.\n     *\n     * @type plugin\n     * @usage $(\"#box-widget\").activateBox();\n     * @usage $(\"#box-widget\").toggleBox();\n     * @usage $(\"#box-widget\").removeBox();\n     */\n    $.fn.activateBox = () => {\n        $.App.widgets.boxWidget.activate(this);\n    };\n\n    $.fn.toggleBox = () => {\n        let button = $($.App.boxWidget.selectors.collapse, this);\n        $.App.widgets.boxWidget.collapse(button);\n    };\n\n    $.fn.removeBox = () => {\n        let button = $($.App.boxWidget.selectors.remove, this);\n        $.App.widgets.boxWidget.remove(button);\n    };\n\n    /*\n     * TODO LIST CUSTOM PLUGIN\n     * -----------------------\n     * This plugin depends on iCheck plugin for checkbox and radio inputs\n     *\n     * @type plugin\n     * @usage $(\"#todo-widget\").todolist( options );\n     */\n    $.fn.todolist = todoList;\n});\n"]}